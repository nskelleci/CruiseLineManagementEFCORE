// <auto-generated />
using System;
using CruiseLineManagementEFCORE.Module.BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruiseLineManagementEFCORE.Module.Migrations
{
    [DbContext(typeof(CruiseLineManagementEFCOREEFCoreDbContext))]
    partial class CruiseLineManagementEFCOREEFCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Proxies:ChangeTracking", true)
                .HasAnnotation("Proxies:CheckEquality", true)
                .HasAnnotation("Proxies:LazyLoading", false)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserVessel", b =>
                {
                    b.Property<Guid>("AssignedUsersID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedVesselsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssignedUsersID", "AssignedVesselsID");

                    b.HasIndex("AssignedVesselsID");

                    b.ToTable("ApplicationUserVessel");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.ApplicationUserLoginInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProviderName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderUserKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserForeignKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserForeignKey");

                    b.HasIndex("LoginProviderName", "ProviderUserKey")
                        .IsUnique()
                        .HasFilter("[LoginProviderName] IS NOT NULL AND [ProviderUserKey] IS NOT NULL");

                    b.ToTable("PermissionPolicyUserLoginInfo");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.CruiseObjects.Cruise", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SeasonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonVesselID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("SeasonID");

                    b.HasIndex("SeasonVesselID");

                    b.ToTable("Cruises");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.CruisePassenger", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CruiseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FolioID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PassengerID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CruiseID");

                    b.HasIndex("PassengerID");

                    b.ToTable("CruisePassengers");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.Passenger", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.PassengerFolio", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CruisePassengerID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CruisePassengerID")
                        .IsUnique();

                    b.ToTable("PassengerFolios");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.SalesObjects.Transaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PassengerFolioID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PassengerFolioID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.Season", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.SeasonVessel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSeasonActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SeasonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("SeasonID");

                    b.HasIndex("VesselID");

                    b.ToTable("SeasonVessels");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.Cabin", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CabinBedTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CabinCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CabinTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeckID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VesselSideID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CabinBedTypeID");

                    b.HasIndex("CabinCategoryID");

                    b.HasIndex("CabinTypeID");

                    b.HasIndex("DeckID");

                    b.HasIndex("VesselID");

                    b.HasIndex("VesselSideID");

                    b.ToTable("Cabins");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinBedType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("VesselID");

                    b.ToTable("CabinBedTypes");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("VesselID");

                    b.ToTable("CabinCategories");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("VesselID");

                    b.ToTable("CabinTypes");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Deck", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeckNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("VesselID");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IMO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Vessels");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselLocation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeckID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VesselSideID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("DeckID");

                    b.HasIndex("VesselID");

                    b.HasIndex("VesselSideID");

                    b.ToTable("VesselLocations");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSafetyObjects.MusterStation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("MusterStations");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSafetyObjects.SurvivalCraft", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("SurvivalCrafts");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSafetyObjects.SurvivalCraftType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("SurvivalCraftsTypes");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSide", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VesselID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("VesselID");

                    b.ToTable("VesselSides");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Analysis", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ChartSettingsContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionPropertiesString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PivotGridSettingsContent")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ID");

                    b.ToTable("Analysis");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.DashboardData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SynchronizeTitle")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DashboardData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AlarmTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPostponed")
                        .HasColumnType("bit");

                    b.Property<int>("Label")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurrenceInfoXml")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("RecurrencePatternID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("RemindIn")
                        .HasColumnType("time");

                    b.Property<string>("ReminderInfoXml")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RecurrencePatternID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.FileData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("FileData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiDefinition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Compare")
                        .HasColumnType("bit");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("EnableCustomizeRepresentation")
                        .HasColumnType("bit");

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GreenZone")
                        .HasColumnType("real");

                    b.Property<int>("MeasurementFrequency")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementMode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RangeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RangeToCompareName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RedZone")
                        .HasColumnType("real");

                    b.Property<string>("SuppressedSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetObjectTypeFullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("KpiDefinition");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiHistoryItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KpiInstanceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RangeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RangeStart")
                        .HasColumnType("datetime2");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("KpiInstanceID");

                    b.ToTable("KpiHistoryItem");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiInstance", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ForceMeasurementDateTime2")
                        .HasColumnType("datetime2")
                        .HasColumnName("ForceMeasurementDateTime");

                    b.Property<Guid>("KpiDefinitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KpiDefinitionID");

                    b.ToTable("KpiInstance");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiScorecard", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("KpiScorecard");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContextId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ModelDifferences");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifferenceAspect", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("ModelDifferenceAspects");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyActionPermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Members")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TypePermissionObjectID");

                    b.ToTable("PermissionPolicyMemberPermissionsObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyNavigationPermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TypePermissionObjectID");

                    b.ToTable("PermissionPolicyObjectPermissionsObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanEditModel")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<bool>("IsAdministrative")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllowPermissionPriority")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionPolicy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PermissionPolicyRoleBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyRoleBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreateState")
                        .HasColumnType("int");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyTypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ChangePasswordOnFirstLogon")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StoredPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PermissionPolicyUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ReportDataV2", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DataTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInplaceReport")
                        .HasColumnType("bit");

                    b.Property<string>("ParametersObjectTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PredefinedReportTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ReportDataV2");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Resource", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Color_Int")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditDataItemPersistent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuditedObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NewObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OldObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AuditedObjectID");

                    b.HasIndex("NewObjectID");

                    b.HasIndex("OldObjectID");

                    b.HasIndex("UserObjectID");

                    b.ToTable("AuditData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Key", "TypeName");

                    b.ToTable("AuditEFCoreWeakReference");
                });

            modelBuilder.Entity("EventResource", b =>
                {
                    b.Property<Guid>("EventsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourcesKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventsID", "ResourcesKey");

                    b.HasIndex("ResourcesKey");

                    b.ToTable("EventResource");
                });

            modelBuilder.Entity("KpiInstanceKpiScorecard", b =>
                {
                    b.Property<Guid>("IndicatorsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScorecardsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndicatorsID", "ScorecardsID");

                    b.HasIndex("ScorecardsID");

                    b.ToTable("KpiInstanceKpiScorecard");
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.Property<Guid>("RolesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("PermissionPolicyRolePermissionPolicyUser");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase");

                    b.HasDiscriminator().HasValue("PermissionPolicyRole");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.ApplicationUser", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ApplicationUserVessel", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("AssignedUsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", null)
                        .WithMany()
                        .HasForeignKey("AssignedVesselsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.ApplicationUserLoginInfo", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.ApplicationUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.CruiseObjects.Cruise", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.Season", null)
                        .WithMany("Cruises")
                        .HasForeignKey("SeasonID");

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.SeasonVessel", "SeasonVessel")
                        .WithMany("Cruises")
                        .HasForeignKey("SeasonVesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonVessel");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.CruisePassenger", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.CruiseObjects.Cruise", "Cruise")
                        .WithMany("CruisePassengers")
                        .HasForeignKey("CruiseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.Passenger", "Passenger")
                        .WithMany("PastCruises")
                        .HasForeignKey("PassengerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cruise");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.PassengerFolio", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.CruisePassenger", "CruisePassenger")
                        .WithOne("Folio")
                        .HasForeignKey("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.PassengerFolio", "CruisePassengerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CruisePassenger");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.SalesObjects.Transaction", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.PassengerFolio", "PassengerFolio")
                        .WithMany("Transactions")
                        .HasForeignKey("PassengerFolioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassengerFolio");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.SeasonVessel", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.Season", "Season")
                        .WithMany("SeasonVessels")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("SeasonVessels")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.Cabin", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinBedType", "CabinBedType")
                        .WithMany("Cabins")
                        .HasForeignKey("CabinBedTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinCategory", "CabinCategory")
                        .WithMany("Cabins")
                        .HasForeignKey("CabinCategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinType", "CabinType")
                        .WithMany("Cabins")
                        .HasForeignKey("CabinTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Deck", "Deck")
                        .WithMany("Cabins")
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("Cabins")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSide", "VesselSide")
                        .WithMany("Cabins")
                        .HasForeignKey("VesselSideID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CabinBedType");

                    b.Navigation("CabinCategory");

                    b.Navigation("CabinType");

                    b.Navigation("Deck");

                    b.Navigation("Vessel");

                    b.Navigation("VesselSide");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinBedType", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("CabinBedTypes")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinCategory", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("CabinCategories")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinType", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("CabinTypes")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Deck", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("Decks")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselLocation", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Deck", "Deck")
                        .WithMany("VesselLocations")
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("VesselLocations")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSide", "VesselSide")
                        .WithMany("VesselLocations")
                        .HasForeignKey("VesselSideID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Vessel");

                    b.Navigation("VesselSide");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSide", b =>
                {
                    b.HasOne("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", "Vessel")
                        .WithMany("VesselSides")
                        .HasForeignKey("VesselID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Event", "RecurrencePattern")
                        .WithMany("RecurrenceEvents")
                        .HasForeignKey("RecurrencePatternID");

                    b.Navigation("RecurrencePattern");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiHistoryItem", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiInstance", "KpiInstance")
                        .WithMany("HistoryItems")
                        .HasForeignKey("KpiInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KpiInstance");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiInstance", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiDefinition", "KpiDefinition")
                        .WithMany("KpiInstances")
                        .HasForeignKey("KpiDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KpiDefinition");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifferenceAspect", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.ModelDifference", "Owner")
                        .WithMany("Aspects")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("ActionPermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("TypePermissionObjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("NavigationPermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("ObjectPermissions")
                        .HasForeignKey("TypePermissionObjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("TypePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditDataItemPersistent", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "AuditedObject")
                        .WithMany("AuditItems")
                        .HasForeignKey("AuditedObjectID");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "NewObject")
                        .WithMany("NewItems")
                        .HasForeignKey("NewObjectID");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "OldObject")
                        .WithMany("OldItems")
                        .HasForeignKey("OldObjectID");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "UserObject")
                        .WithMany("UserItems")
                        .HasForeignKey("UserObjectID");

                    b.Navigation("AuditedObject");

                    b.Navigation("NewObject");

                    b.Navigation("OldObject");

                    b.Navigation("UserObject");
                });

            modelBuilder.Entity("EventResource", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KpiInstanceKpiScorecard", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiInstance", null)
                        .WithMany()
                        .HasForeignKey("IndicatorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiScorecard", null)
                        .WithMany()
                        .HasForeignKey("ScorecardsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.CruiseObjects.Cruise", b =>
                {
                    b.Navigation("CruisePassengers");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.CruisePassenger", b =>
                {
                    b.Navigation("Folio");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.Passenger", b =>
                {
                    b.Navigation("PastCruises");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.PassengerObjects.PassengerFolio", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.Season", b =>
                {
                    b.Navigation("Cruises");

                    b.Navigation("SeasonVessels");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.SeasonObjects.SeasonVessel", b =>
                {
                    b.Navigation("Cruises");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinBedType", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinCategory", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.CabinObjects.CabinType", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Deck", b =>
                {
                    b.Navigation("Cabins");

                    b.Navigation("VesselLocations");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.Vessel", b =>
                {
                    b.Navigation("CabinBedTypes");

                    b.Navigation("CabinCategories");

                    b.Navigation("CabinTypes");

                    b.Navigation("Cabins");

                    b.Navigation("Decks");

                    b.Navigation("SeasonVessels");

                    b.Navigation("VesselLocations");

                    b.Navigation("VesselSides");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.VesselObjects.VesselSide", b =>
                {
                    b.Navigation("Cabins");

                    b.Navigation("VesselLocations");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.Navigation("RecurrenceEvents");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiDefinition", b =>
                {
                    b.Navigation("KpiInstances");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Kpi.KpiInstance", b =>
                {
                    b.Navigation("HistoryItems");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifference", b =>
                {
                    b.Navigation("Aspects");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Navigation("ActionPermissions");

                    b.Navigation("NavigationPermissions");

                    b.Navigation("TypePermissions");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Navigation("MemberPermissions");

                    b.Navigation("ObjectPermissions");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", b =>
                {
                    b.Navigation("AuditItems");

                    b.Navigation("NewItems");

                    b.Navigation("OldItems");

                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("CruiseLineManagementEFCORE.Module.BusinessObjects.ApplicationUser", b =>
                {
                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
